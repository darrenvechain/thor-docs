openapi: 3.0.3
info:
  title: Thorest API
  description: |
    
    RESTful API to access VechainThor Network
    
    [Project Home](https://github.com/vechain/thor)

  license:
    name: LGPL 3.0
    url: https://www.gnu.org/licenses/lgpl-3.0.en.html
  version: 2.1.0
servers:
  - url: https://mainnet.vechain.org
    description: Mainnet
  - url: https://testnet.vechain.org
    description: Testnet
tags:
  - name: Accounts
    description: |
      Provides access to on-chain account and contract information.  This includes details about account balances, contract states, and related functionalities.
  - name: Transactions
    description: |
      Manages blockchain transactions, enabling the creation, retrieval, and verification  of transactions on the blockchain.
  - name: Blocks
    description: |
      Retrieves information about on-chain blocks
  - name: Logs
    description: |
      Query on-chain logs stemming from transaction outputs.  This feature empowers users to delve into the intricacies of transaction history,  providing a comprehensive view of on-chain activities.
  - name: Node
    description: |
      Provides information about the node's status
  - name: Subscriptions
    description: |
      Facilitates WebSocket-based interactions with the blockchain, allowing users to subscribe  to real-time events, updates, or notifications related to specific blockchain activities.
  - name: Debug
    description: |
      Offers a set of debugging utilities

paths:
  /accounts/{address}:
    get:
      parameters:
        - $ref: '#/components/parameters/GetAccountAddressInPath'
        - $ref: '#/components/parameters/RevisionInQuery'
      tags:
        - Accounts
      summary: Retrieve account details
      description: |
        Retrieve information about an account or a contract identified by its `address`.

        To access historical details, you can specify a `revision` as a query parameter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'
  /accounts/*:
    post:
      parameters:
        - $ref: '#/components/parameters/RevisionInQuery'
      tags:
        - Accounts
      summary: Execute a batch of codes
      description: |
        This endpoint can be used for various purposes:
        
          - Read contract state.
          - Simulate the execution of a transaction. This can be useful to determine if your transaction may revert before submitting it.
          - Inspect the outputs of a transaction before executing it.
          - Estimate the gas consumption of a transaction.

        The fields `gasPayer`, `provedWork`, `blockRef` and `expiration` are for built-in contract purposes only. For example, no error is returned if the transaction is technically expired. For more information about built-in contracts, please refer to the vechain documentation.

        To access historical details, you can specify a `revision` as a query parameter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref : '#/components/schemas/PostAccountRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAccountResponse'
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: 'Invalid address'

  /accounts/{address}/code:
    parameters:
      - $ref: '#/components/parameters/GetCodeAddressInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve a contract's bytecode
      description: |
        If the provided address is not a contract, empty bytecode is returned.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountCodeResponse'

  /accounts/{address}/storage/{key}:
    parameters:
      - $ref: '#/components/parameters/GetStorageAddressInPath'
      - $ref: '#/components/parameters/StorageKeyInPath'
      - $ref: '#/components/parameters/RevisionInQuery'
    get:
      tags:
        - Accounts
      summary: Retrieve the value of a storage position.
      description: |
        This endpoint allows you to retrieve the value stored at a specific storage position (`{key}`) of a Vechain smart contract associated with the provided address (`{address}`). The response will contain information about the stored value for the given key.
        
        To access historical details, you can specify a `revision` as a query parameter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStorageResponse'

  /transactions/{id}:
    get:
      parameters:
        - $ref: '#/components/parameters/TxIDInPath'
        - $ref: '#/components/parameters/RawTxInQuery'
        - $ref: '#/components/parameters/HeadInQuery'
        - $ref: '#/components/parameters/PendingInQuery'
      tags:
        - Transactions
      summary: Retrieve Transaction by ID
      description: |
        This endpoint allows you to retrieve a transaction identified by its ID. If the `pending` parameter is set to true, the response may include a pending transaction with a null `meta` field. Use this option when you want to retrieve both confirmed and pending transactions, providing flexibility in accessing real-time transaction data.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/Tx'
                    properties:
                      meta:
                        required: false
                        $ref: '#/components/schemas/TxMeta'
                  - allOf:
                      - $ref: '#/components/schemas/RawTx'
                    properties:
                      meta:
                        required: false
                        $ref: '#/components/schemas/TxMeta'
                    description: raw transaction
                example:
                  id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
                  chainTag: 1
                  blockRef: '0x00000001511fc0be'
                  expiration: 30
                  clauses: []
                  gasPriceCoef: 128
                  gas: 21000
                  origin: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'
                  delegator: null
                  nonce: '0xd92966da424d9939'
                  dependsOn: null
                  size: 180
                  meta:
                    blockID: '0x00000001c458949985a6d86b7139690b8811dd3b4647c02d4f41cdefb7d32327'
                    blockNumber: 1
                    blockTimestamp: 1523156271

  /transactions/{id}/receipt:
    get:
      parameters:
        - $ref: '#/components/parameters/TxIDInPath'
        - $ref: '#/components/parameters/HeadInQuery'
      tags:
        - Transactions
      summary: Retrieve transaction receipt
      description: |
        by ID.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Receipt'
                properties:
                  meta:
                    $ref: '#/components/schemas/ReceiptMeta'

  /transactions:
    post:
      tags:
        - Transactions
      summary: Send a transaction
      description: |
        This endpoint allows you to send a transaction to the blockchain. The transaction must be signed and RLP encoded.
        
        The below is a TypeScript example of how to sign and RLP encode a transaction using the `thor-devkit` library:
        
        ```typescript
        import { Transaction, secp256k1 } from 'thor-devkit'

        const clauses =  [{
            to: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed',
            value: 10000,
            data: '0x'
        }]

        let body: Transaction.Body = {
            chainTag: 0x9a,
            blockRef: '0x0000000000000000',
            expiration: 32,
            clauses: clauses,
            gasPriceCoef: 128,
            gas: Transaction.intrinsicGas(clauses),
            dependsOn: null,
            nonce: 12345678
        }

        const tx = new Transaction(body)
        const signingHash = tx.signingHash()
        tx.signature = secp256k1.sign(signingHash, Buffer.from("99f0500549792796c14fed62011a51081dc5b5e68fe8bd8a13b86be829c4fd36", "hex"))

        const raw = tx.encode()
        const decoded = Transaction.decode(raw)
        
        axios.post('http://localhost:8669/transactions', {
          raw: '0x' + raw.toString('hex')
        })
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawTx'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TXID'

  /blocks/{revision}:
    get:
      parameters:
        - $ref: '#/components/parameters/RevisionInPath'
        - $ref: '#/components/parameters/ExpandedInQuery'
      tags:
        - Blocks
      summary: Retrieve block
      description: |
        by ID or number, or 'best' for latest block or 'finalized' for finalized block. If `expanded` query option is true, all transactions along with
        their receipts will be embedded under `transactions` field instead of ids.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - allOf:
                      - $ref: '#/components/schemas/Block'
                      - $ref: '#/components/schemas/IsTrunk'
                      - $ref: '#/components/schemas/IsFinalized'
                    properties:
                      transactions:
                        description: transaction IDs
                        type: array
                        items:
                          type: string
                          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
                  - allOf:
                      - $ref: '#/components/schemas/Block'
                      - $ref: '#/components/schemas/IsTrunk'
                      - $ref: '#/components/schemas/IsFinalized'
                    properties:
                      transactions:
                        description: embedded transactions along with their receipts
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Tx'
                            - $ref: '#/components/schemas/Receipt'
                    description: expanded block

              example:
                number: 325324
                id: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
                size: 373
                parentID: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
                timestamp: 1533267900
                gasLimit: 11253579
                beneficiary: '0xb4094c25f86d628fdd571afc4077f0d0196afb48'
                gasUsed: 21000
                totalScore: 1029988
                txsRoot: '0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb'
                txsFeatures: 0
                stateRoot: '0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261'
                receiptsRoot: '0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e'
                com: true
                signer: '0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1'
                isTrunk: true
                isFinalized: false
                transactions:
                  - '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'

  /logs/event:
    post:
      tags:
        - Logs
      summary: Filter event logs
      description: |
        Event logs are produced by `OP_LOG` in EVM.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Event'
                  properties:
                    meta:
                      $ref: '#/components/schemas/LogMeta'

  /logs/transfer:
    post:
      tags:
        - Logs
      summary: Filter transfer logs
      description: |
        Transfer logs are recorded on VET transferring.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Transfer'
                  properties:
                    meta:
                      $ref: '#/components/schemas/LogMeta'

  /node/network/peers:
    get:
      tags:
        - Node
      summary: Retrieve connected peers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PeerStats'

  /subscriptions/block:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe new blocks
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Block'
                  - $ref: '#/components/schemas/Obsolete'
                properties:
                  transactions:
                    description: transaction IDs
                    type: array
                    items:
                      type: string
                      example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'

  /subscriptions/event:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe new events
      description: |
        which satisfy criteria in query.

      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
        - name: addr
          in: query
          schema:
            type: string
          description: address of event emitter
        - name: t0
          in: query
          schema:
            type: string
          description: topic0 of event
        - name: t1
          in: query
          schema:
            type: string
          description: topic1 of event
        - name: t2
          in: query
          schema:
            type: string
          description: topic2 of event
        - name: t3
          in: query
          schema:
            type: string
          description: topic3 of event
        - name: t4
          in: query
          schema:
            type: string
          description: topic4 of event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Event'
                  - $ref: '#/components/schemas/Obsolete'
                properties:
                  meta:
                    $ref: '#/components/schemas/LogMeta'


  /subscriptions/transfer:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe new transfers
      description: |
        which satisfy criteria in query.
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
        - name: txOrigin
          in: query
          schema:
            type: string
          description: signer address of tx which contains the transfer
        - name: sender
          in: query
          schema:
            type: string
          description: address of token sender
        - name: recipient
          in: query
          schema:
            type: string
          description: address of token recipient
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Transfer'
                  - $ref: '#/components/schemas/Obsolete'
                properties:
                  meta:
                    $ref: '#/components/schemas/LogMeta'

  /subscriptions/beat:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe block chain's beats
      description: |
        which contain summary of new blocks, and bloom filters that composited with affected addresses.
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Beat'
                  - $ref: '#/components/schemas/Obsolete'

  /subscriptions/beat2:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe block chain's beats
      description: |
        which contain summary of new blocks, and bloom filters that composited with affected addresses.
      parameters:
        - $ref: '#/components/parameters/PositionInQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Beat2'
                  - $ref: '#/components/schemas/Obsolete'

  /subscriptions/txpool:
    get:
      tags:
        - Subscriptions
      summary: (Websocket) Subscribe to new transactions
      description: |
        which is in pending state.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TXID'

  /debug/tracers:
    post:
      tags:
        - Debug
      summary: Create a tracer
      description:
        for a clause
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/ClauseTracerOption'
                - $ref: '#/components/schemas/TracerOption'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /debug/tracers/call:
    post:
      tags:
        - Debug
      summary: Create a tracer
      description:
        for evaluating a method call
      parameters:
        - $ref: '#/components/parameters/HeadInQuery'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TracerOption'
                - $ref: '#/components/schemas/CallData'
                - $ref: '#/components/schemas/ExtendedCallData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object

  /debug/storage-range:
    post:
      tags:
        - Debug
      summary: Retrieve storage range
      description: |
        of the account with given address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageRangeOption'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageRange'

components:
  schemas:
    GetAccountResponse:
      properties:
        balance:
          type: string
          description: VET balance in wei, presented as a hexadecimal string.
          example: '0x47ff1f90327aa0f8e'
        energy:
          type: string
          description: Energy (VTHO) in wei, presented as a hexadecimal string.
          example: '0xcf624158d591398'
        hasCode:
          type: boolean
          description: Indicates whether the account is a contract (true) or not (false).
          example: false
      example:
        balance: '0x47ff1f90327aa0f8e'
        energy: '0xcf624158d591398'
        hasCode: false

    PostAccountRequest:
      allOf:
        - $ref: '#/components/schemas/ExtendedCallData'
        - $ref: '#/components/schemas/BatchCallData'
      example:
        gas: 50000
        gasPrice: '1000000000000000'
        caller: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
        provedWork: "1000"
        gasPayer: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
        expiration: 1000
        blockRef: "0x00000000851caf3c"
        clauses:
          # Contract Call (VTHO Transfer)
          - to: '0x0000000000000000000000000000456E65726779'
            value: '0x0'
            data: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db50000000000000000000000000000000000000000000000013f306a2409fc0000'
          # VET Transfer
          - to: '0xf077b491b355E64048cE21E3A6Fc4751eEeA77fa'
            value: '0x6124fee993bc00000'
            data: '0x'
          # Contract Deployment
          - to: null
            value: '0x0'
            data: '0x6080604052348015600f57600080fd5b50609f8061001e6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029'

    PostAccountResponse:
      type: array
      items:
        $ref: '#/components/schemas/CallResult'
      example:
        # Contract Call (VTHO Transfer)
        - data: "0x0000000000000000000000000000000000000000000000000000000000000001"
          events:
            - address: "0x0000000000000000000000000000456e65726779"
              topics:
                - "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
                - "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
                - "0x0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5"
              data: "0x0000000000000000000000000000000000000000000000013f306a2409fc0000"
          transfers: []
          gasUsed: 13326
          reverted: false
          vmError: ""
        # VET Transfer
        - data: "0x"
          events: []
          transfers:
            - sender: "0x435933c8064b4ae76be665428e0307ef2ccfbd68"
              recipient: "0xf077b491b355e64048ce21e3a6fc4751eeea77fa"
              amount: "0x6124fee993bc00000"
          gasUsed: 0
          reverted: false
          vmError: ""
        # Contract Deployment
        - data: "0x608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631820cabb146044575b600080fd5b348015604f57600080fd5b506056606c565b6040518082815260200191505060405180910390f35b62015180815600a165627a7a723058200ac7475da248e2fc26c057319e296e90c24d5f8b9bf956fb3b77545642cad3b10029"
          events:
            - address: "0xecadd5492c1fa085e40e2c17e79f1a03f38f86ca"
              topics:
                - "0xb35bf4274d4295009f1ec66ed3f579db287889444366c03d3a695539372e8951"
              data: "0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68"
          transfers: []
          gasUsed: 31881
          reverted: false
          vmError: ""

    GetAccountCodeResponse:
      properties:
        code:
          type: string
          description: Contract bytecode, presented as a hexadecimal string.
          example: '0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029'
      example:
        code: '0x6060604052600080fd00a165627a7a72305820c23d3ae2dc86ad130561a2829d87c7cb8435365492bd1548eb7e7fc0f3632be90029'

    GetStorageResponse:
      properties:
        value:
          type: string
          description: The value stored at the given storage position.
          example: '0x0000000000000000000000000000000000000000000000000000000000000001'
      example:
        value: '0x0000000000000000000000000000000000000000000000000000000000000001'

    TxMeta:
      description: Transaction metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          description: The block identifier (bytes32) in which the transaction was included.
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the transaction was included.
          example: 325324
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the transaction was included.
          example: 1533267900
      example:
        blockID: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber: 325324
        blockTimestamp: 1533267900

    ReceiptMeta:
      description: The transaction receipt metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          description: The block identifier in which the transaction was included.
          pattern: '^0x[0-9a-fA-F]{64}$'
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the transaction was included.
          example: 325324
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the transaction was included.
          example: 1533267900
        txID:
          type: string
          description: The transaction identifier.
          pattern: '^0x[0-9a-fA-F]{64}$'
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
        txOrigin:
          type: string
          description: The account from which the transaction was sent.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
      example:
        blockID: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber: 325324
        blockTimestamp: 1533267900
        txID: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
        txOrigin: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'

    LogMeta:
      description: The event or transfer log metadata such as block number, block timestamp, etc.
      properties:
        blockID:
          type: string
          description: The block identifier in which the log was included.
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        blockNumber:
          type: integer
          format: uint32
          description: The block number (height) of the block in which the log was included.
          example: 325324
        blockTimestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block in which the log was included.
          example: 1533267900
        txID:
          type: string
          description: The transaction identifier, from which the log was generated.
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
        txOrigin:
          type: string
          description: The account from which the transaction was sent.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
        clauseIndex:
          type: integer
          format: uint32
          description: The index of the clause in the transaction, from which the log was generated.
          example: 0

    Block:
      properties:
        number:
          type: integer
          format: uint32
          description: The block number (height).
          example: 325324
        id:
          type: string
          format: bytes32
          description: The block identifier.
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        size:
          type: integer
          format: uint32
          description: The RLP encoded block size in bytes
          example: 373
        parentID:
          type: string
          format: bytes32
          description: The parent block identifier.
          example: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
        timestamp:
          type: integer
          format: uint64
          description: The UNIX timestamp of the block.
          example: 1533267900
        gasLimit:
          type: integer
          format: uint64
          description: The maximum amount of gas that all transactions inside the block are allowed to consume
          example: 11253579
        beneficiary:
          type: string
          format: bytes32
          description: The address assigned by the block generator to receive reward (in VTHO)
          example: '0xb4094c25f86d628fdd571afc4077f0d0196afb48'
        gasUsed:
          type: integer
          format: uint64
          description: The actual amount of gas used within the block
          example: 21000
        totalScore:
          type: integer
          format: uint64
          description: The accumulated witness number of the chain branch headed by the block
          example: 1029988
        txsRoot:
          type: string
          format: bytes32
          description: The root hash of transactions in the block
          example: '0x89dfd9fcd10c9e53d68592cf8b540b280b72d381b868523223992f3e09a806bb'
        txsFeatures:
          type: integer
          format: uint32
          description: The supported transaction features bitset
          example: 0
        stateRoot:
          type: string
          format: bytes32
          description: root hash of accounts state
          example: '0x86bcc6d214bc9d8d0dedba1012a63c8317d19ce97f60c8a2ef5c59bbd40d4261'
        receiptsRoot:
          type: string
          format: bytes32
          description: root hash of transaction receipts
          example: '0x15787e2533c470e8a688e6cd17a1ee12d8457778d5f82d2c109e2d6226d8e54e'
        com:
          type: boolean
          description: whether the block signer voted COM(Commit) in BFT
        signer:
          type: string
          format: bytes20
          description: the one who signed this block
          example: '0xab7b27fc9e7d29f9f2e5bd361747a5515d0cc2d1'

    Clause:
      properties:
        to:
          type: string
          description: |
            The recipient of the clause. Null indicates contract deployment.
          example: '0x0000000000000000000000000000456e65726779'
        value:
          type: string
          description: |
            The hexadecimal representation of the token to be transferred.
          example: '0x47ff1f90327aa0f8e'
        data:
          type: string
          description: |
            The input data for the clause (in bytes).
          example: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000'

    Tx:
      properties:
        id:
          type: string
          description: The transaction identifier.
          example: '0x284bba50ef777889ff1a367ed0b38d5e5626714477c40de38d71cedd6f9fa477'
          pattern: '^0x[0-9a-fA-F]{64}$'
        origin:
          type: string
          description: The address of the origin account.
          pattern: '^0x[0-9a-fA-F]{40}$'
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
        delegator:
          type: string
          pattern: '^0x[0-9a-fA-F]{40}$'
          description: The address of the sponsor / delegator account.
          example: null
        size:
          type: integer
          format: uint32
          description: Byte size of the transaction that is RLP encoded.
          example: 130
        chainTag:
          type: integer
          format: uint8
          description: The last byte of the genesis block ID.
          example: 39
        blockRef:
          type: string
          description: The first 8 bytes of a referenced block ID.
          example: '0x0004f6cb730dbd90'
        expiration:
          type: integer
          format: uint32
          description: The expiration of the transaction, represented as the number of blocks after the `blockRef`
          example: 720
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
        gasPriceCoef:
          type: integer
          format: uint8
          description: The coefficient used to calculate the final gas price of the transaction.
          example: 0
        gas:
          type: integer
          format: uint64
          description: The max amount of gas that can be used by the transaction.
          example: 21000
        dependsOn:
          type: string
          format: bytes32
          description: <b>Optional</b>:The transaction ID that this transaction depends on.
          example: null
        nonce:
          type: string
          example: '0x29c257e36ea6e72a'
          description: |
            The transaction `nonce` is a 64-bit unsigned integer that is determined by the transaction sender.


    RawTx:
      properties:
        raw:
          type: string
          description: The raw RLP encoded transaction.
          example: '0xf86981ba800adad994000000000000000000000000000000000000746f82271080018252088001c0b8414792c9439594098323900e6470742cd877ec9f9906bca05510e421f3b013ed221324e77ca10d3466b32b1800c72e12719b213f1d4c370305399dd27af962626400'

    Event:
      properties:
        address:
          type: string
          description: |
            The address of the contract that produces the event (bytes20).
          example: '0x0000000000000000000000000000456e65726779'
        topics:
          type: array
          description: |
            Topics are indexed parameters to an event. The first topic is always the event signature.
          items:
            type: string
            description: |
          example:
            - '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
            - '0x000000000000000000000000435933c8064b4ae76be665428e0307ef2ccfbd68'
        data:
          type: string
          description: |
            The data associated with the event.
          example: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'

    Transfer:
      properties:
        sender:
          type: string
          description: |
            The address sent the tokens.
          example: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
        recipient:
          type: string
          description: |
            The address that received tokens.
          example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'
        amount:
          type: string
          description: |
            The amount of tokens transferred.
          example: '0x47fdb3c3f456c0000'

    Receipt:
      properties:
        gasUsed:
          type: integer
          format: uint64
          description: |
            The amount of gas used by the transaction.
          example: 21000
        gasPayer:
          type: string
          description: |
            The address of the account that paid the gas fee.
          example: '0xdb4027477b2a8fe4c83c6dafe7f86678bb1b8a8d'
        paid:
          type: string
          description: The amount of energy (VTHO) in wei, used to pay for the gas.
          example: '0x1236efcbcbb340000'
        reward:
          type: string
          description: The amount of energy (VTHO) in wei, paid to the block signer as a reward.
          example: '0x576e189f04f60000'
        reverted:
          type: boolean
          description: |
            Indicates whether the transaction was reverted (true means reverted).
          example: false
        outputs:
          type: array
          description: |
            An array of outputs produced by the transaction.
          items:
            properties:
              contractAddress:
                type: string
                description: |
                    The address of the deployed contract, if the corresponding clause is a
                    contract deployment clause.
                example: '0x0000000000000000000000000000456e65726779'
              events:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              transfers:
                type: array
                items:
                  $ref: '#/components/schemas/Transfer'

    CallData:
      properties:
        value:
          type: string
          description: |
            The amount of token to be transferred.
          example: '0x47ff1f90327aa0f8e'
        data:
          type: string
          description: |
            The input data for the contract call.
          example: '0xa9059cbb0000000000000000000000000f872421dc479f3c11edd89512731814d0598db5000000000000'
        gas:
          type: integer
          format: uint64
          description: |
            The maximum allowed gas for execution.
          example: 21000
        gasPrice:
          type: string
          description: |
            The absolute gas price.
          example: '1000000000000000'
        caller:
          type: string
          description: |
            The caller's address (msg.sender).
          example: 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa

    ExtendedCallData:
      properties:
        provedWork:
          type: string
          description: |
            The transaction's proved work (for extension contract).
          example: "1000"
        gasPayer:
          type: string
          description: |
            The address of the gas payer (for extension contract).
          example: "0xd3ae78222beadb038203be21ed5ce7c9b1bff602"
        expiration:
          type: integer
          format: uint32
          description: |
            The transaction expiration (for extension contract).
          example: 1000
        blockRef:
          type: string
          description: |
            The block reference (for extension contract).
          example: "0x00000000851caf3c"

    CallResult:
      properties:
        data:
          type: string
          description: |
            The output data produced by the contract execution.
          example: '0x0000000000000000000000000000000000000000000000000000000000000001'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
          description: |
            An array of events generated during contract execution.
        transfers:
          type: array
          items:
            $ref: '#/components/schemas/Transfer'
          description: |
            An array of transfers that occurred during contract execution.
        gasUsed:
          type: integer
          format: uint64
          description: |
            The amount of gas used during execution.
          example: 21000
        reverted:
          type: boolean
          description: |
            Indicates whether the transaction was reverted (true means reverted).
          example: false
        vmError:
          type: string
          description: |
            The virtual machine error message if the execution encountered an error.
          example: 'insufficient balance for transfer'

    BatchCallData:
      properties:
        clauses:
          type: array
          items:
            $ref: '#/components/schemas/Clause'
          description: |
            An array of clauses to be executed.
        gas:
          type: integer
          format: uint64
          description: |
            The maximum allowed gas for the execution of the batch call.
          example: 50000
        gasPrice:
          type: string
          description: |
            The absolute gas price for the batch call.
          example: 1000000000000000
        caller:
          type: string
          description: |
            The caller's address (msg.sender) for the batch call.
          example: 0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa

      example:
        clauses:
          - to: '0x5034aa590125b64023a0262112b98d72e3c8e40e'
            value: '0xde0b6b3a7640000'
            data: '0x5665436861696e2054686f72'
        gas: 50000
        gasPrice: '1000000000000000'
        caller: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'

    BatchCallResult:
      type: array
      items:
        $ref: '#/components/schemas/CallResult'


    FilterOptions:
      properties:
        offset:
          type: integer
          example: 0
          description: |
            offset in matched record set
        limit:
          type: integer
          example: 10
          description: |
            limit of records to output
      description: |
        pass these parameters if you need filtered results paged. e.g. 
        ```
        {
          "options": {
            "offset": 0,
            "limit": 10   
          }
        }
        ```
        the above refers that page offset is 0, and the page size is 10.
        pass options `null` if you don't need to demand paging.

    FilterRange:
      properties:
        unit:
          type: string
          enum:
            - block
            - time

          example: block
          description: |
            defines the unit of `from` and `to`.
            `block` means block number, `time` means block timestamp, default to `block`.

        from:
          type: integer
          format: uint64
          example: 0

        to:
          type: integer
          format: uint64
          example: 100000

      description: |
        defines the range to filter in. e.g.
        ```
        {
            "range": {
                "unit": "block",
                "from": 10,
                "to": 1000
            }
        }
        ```
        refers to the range from block 10 to block 1000.
        `null` stands for the full range.

    EventCriteria:
      properties:
        address:
          type: string
          description: address of event emitter
        topic0:
          type: string
        topic1:
          type: string
        topic2:
          type: string
        topic3:
          type: string
        topic4:
          type: string
      description: |
        criteria to filter out event. All fields are joined with `and` operator. `null` field are ignored. e.g. 
        ```
        {
          "address": "0x0000000000000000000000000000456E65726779",
          "topic0": "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        }
        ```
        matches events emitted by `0xe59d475abe695c7f67a8a2321f33a856b0b4c71d` and with `topic0` equals `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
      example:
        address: "0x0000000000000000000000000000456E65726779"
        topic0: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'
        topic1: '0x0000000000000000000000005034aa590125b64023a0262112b98d72e3c8e40e'

    EventFilter:
      properties:
        range:
          $ref: '#/components/schemas/FilterRange'
        options:
          $ref: '#/components/schemas/FilterOptions'
        criteriaSet:
          type: array
          items:
            $ref: '#/components/schemas/EventCriteria'
        order:
          description: |
            order of filters, defaults to `asc`
          type: string
          enum:
            - asc
            - desc

    TransferCriteria:
      properties:
        txOrigin:
          type: string
          example: '0xe59d475abe695c7f67a8a2321f33a856b0b4c71d'
        sender:
          type: string
          example: '0xe59d475abe695c7f67a8a2321f33a856b0b4c71d'
        recipient:
          type: string
          example: '0x7567d83b7b8d80addcb281a71d54fc7b3364ffed'

    TransferFilter:
      properties:
        range:
          $ref: '#/components/schemas/FilterRange'
        options:
          $ref: '#/components/schemas/FilterOptions'
        criteriaSet:
          type: array
          items:
            $ref: '#/components/schemas/TransferCriteria'
        order:
          description: |
            order of filters, defaults to `asc`
          type: string
          enum:
            - asc
            - desc

    PeerStats:
      properties:
        name:
          type: string
          example: 'thor/v1.0.0-6680b98-dev/linux/go1.10.3'
        bestBlockID:
          type: string
          example: '0x000087b3a4d4cdf1cc52d56b9704f4c18f020e1b48dbbf4a23d1ee4f1fa5ff94'
        totalScore:
          type: integer
          example: 68497
        peerID:
          type: string
          example: '50e122a505ee55b84331068acfd857e37ad58f463a0fab9aaff2c1e4b2e2d22ae71dc14fdaf6eead74bd3f60594644aa35c588f9ca6be3341e2ce18ddc413321'
        netAddr:
          type: string
          example: '128.1.39.120:11235'
        inbound:
          type: boolean
          example: false
        duration:
          type: integer
          example: 28

    TXID:
      properties:
        id:
          type: string
          description: |
            The transaction identifier.
                example:
          example: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'
      example:
        id: '0x4de71f2d588aa8a1ea00fe8312d92966da424d9939a511fc0be81e65fad52af8'

    Obsolete:
      properties:
        obsolete:
          type: boolean
          description: |
            indicates whether the block containing this data become branch block

    ClauseTracerOption:
      properties:
        target:
          type: string
          description: |
            the unified path of target to be traced.
            Currently, only clause is supported. Format:
            `blockID/(txIndex|txId)/clauseIndex`
          example: '0x000dabb4d6f0a80ad7ad7cd0e07a1f20b546db0730d869d5ccb0dd2a16e7595b/0/0'

    TracerOption:
      properties:
        name:
          type: string
          enum:
            - ""
            - 4byte
            - call
            - noop
            - prestate
            - unigram
            - bigram
            - trigram
            - evmdis
            - opcount
          description: |
            name of tracer. Empty name stands for default struct logger tracer.
          example: ""
        config:
          type: object
          description: |
            configuration of tracer. It is tracer specific.

    StorageRangeOption:
      properties:
        address:
          type: string
          description: |
            address of account
          example: '0xa4627036e2095eb71c2341054daa63577c062498'
        keyStart:
          type: string
          example: '0x0000000000000000000000000000000000000000000000000000000000000000'
        maxResult:
          type: number
          example: 10
        target:
          type: string
          example: '0x000edefb448685f9c72fc2b946980ef51d8d208bbaa4d3fdcf0c57d4847aca2e/0/0'

    StorageRange:
      properties:
        nextKey:
          type: string
          example:
            null
        storage:
          type: object
          example:
            '0x33e423980c9b37d048bd5fadbd4a2aeb95146922045405accc2f468d0ef96988':
              key:
                '0x0000000000000000000000000000000000000000000000000000000000000001'
              value:
                '0x00000000000000000000000000000000000000000000000000000000000000c8'
    Beat:
      properties:
        number:
          type: integer
          format: uint32
          description: block number (height)
          example: 325324
        id:
          type: string
          format: bytes32
          description: block identifier
          example: '0x0004f6cc88bb4626a92907718e82f255b8fa511453a78e8797eb8cea3393b215'
        parentID:
          type: string
          format: bytes32
          description: parent block ID
          example: '0x0004f6cb730dbd90fed09d165bfdf33cc0eed47ec068938f6ee7b7c12a4ea98d'
        timestamp:
          type: integer
          format: uint64
          description: block unix timestamp
          example: 1533267900
        txsFeatures:
          type: integer
          format: uint32
          description: supported txs features bitset
          example: 0
        bloom:
          type: string
          format: hex
          description: |
            the bloom filter composited with affected addresses
          example: '0x
        k:
          type: integer
          format: uint32
          description: |
            the number of hash functions for bloom filter
          example: 3

    Beat2:
      allOf:
        - $ref: '#/components/schemas/Beat'
      properties:
        gasLimit:
          type: integer
          format: uint64
          description: block gas limit
          example: 12000000

    IsTrunk:
      properties:
        isTrunk:
          type: boolean
          description: whether the block is on the trunk

    IsFinalized:
      properties:
        isFinalized:
          type: boolean
          description: whether the block is finalized

  parameters:
    GetAccountAddressInPath:
      name: address
      in: path
      description: The address of the account/ contract
      required: true
      schema:
        type: string
        format: hex
        pattern: '^(0x)?[0-9a-fA-F]{40}$'
      example: '0x6d95e6dca01d109882fe1726a2fb9865fa41e7aa'

    GetCodeAddressInPath:
      name: address
      in: path
      description: The address of the account/ contract
      required: true
      schema:
          type: string
          format: hex
          pattern: '^(0x)?[0-9a-fA-F]{40}$'
      example: '0x0000000000000000000000000000456E65726779'

    GetStorageAddressInPath:
      name: address
      in: path
      description: The address of the account/ contract
      required: true
      schema:
          type: string
          format: hex
          pattern: '^(0x)?[0-9a-fA-F]{40}$'
      example: '0x93Ae8aab337E58A6978E166f8132F59652cA6C56'

    RawTxInQuery:
      name: raw
      in: query
      description: Whether the response should include a raw transaction represented in hexadecimal format.
      required: false
      schema:
        type: boolean
      example: false

    RevisionInQuery:
      name: revision
      in: query
      description: Specify either a block number or ID. If omitted, the best block is assumed.
      schema:
        type: string
        pattern: '^(0x)?([0-9a-fA-F]{64}|[0-9]+)$'

    RevisionInPath:
      name: revision
      in: path
      description: |
        block ID or number, or 'best' stands for latest block, or 'finalized' stands for finalized block
      required: true
      schema:
        type: string
      example: best

    HeadInQuery:
      name: head
      in: query
      description: Explicitly define the ID of the head block. Best block is assumed if omitted.
      schema:
        type: string

    StorageKeyInPath:
      in: path
      description: |
        The unique identifier (key) representing the specific position in the account storage.
        This key is used to access and retrieve data stored at a particular storage position.
      required: true
      name: key
      schema:
        type: string
        pattern: '^(0x)?[0-9a-fA-F]{64}$'
      example: '0x0000000000000000000000000000000000000000000000000000000000000001'

    FilterAddressInQuery:
      name: address
      in: query
      description: address of account which is the events emitter
      required: false
      schema:
        type: string
      example: '0x0000000000000000000000000000456e65726779'

    FilterOrderInQuery:
      name: order
      in: query
      description: |
        order of filters, defaults to `asc`
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      example: asc

    TxIDInPath:
      in: path
      description: The transaction ID
      required: true
      name: id
      schema:
        type: string
      example: '0xb6b5b47a5eee8b14e5222ac1bb957c0bbdc3d489850b033e3e544d9ca0cef934'

    PositionInQuery:
      name: pos
      in: query
      description: |
        a saved block ID for resuming the subscription. best block ID is assumed if omitted.
      schema:
        type: string

    ExpandedInQuery:
      name: expanded
      in: query
      required: false
      description: |
        whether the returned block is expanded.
      schema:
        type: boolean
      example: false

    PendingInQuery:
      name: pending
      in: query
      required: false
      description: |
        Allows you to indicate whether the response should include transactions that are still pending
      schema:
        type: boolean
      example: false
